#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4; max-line-length: 100 -*-

# Copyright (C) 2025  Christopher Pommer <cp.software@outlook.de>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


####################################################################################################
# This Checkmk plugin (Special Agent) retrieves information from Microsoft Entra using the Microsoft
# Graph API. The plugin can be used to monitor the status of the Entra Connect Sync, the credentials
# of the Entra app registrations, and the SAML certificate from Entra service principals.


import sys
import argparse
import json
from pathlib import Path
from typing import List, Optional, TypedDict

import requests

import cmk.utils.password_store
from cmk.utils.http_proxy_config import deserialize_http_proxy_config, HTTPProxyConfig


def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--tenant-id", required=True, help="The unique ID from the Microsoft Entra tenant."
    )
    parser.add_argument(
        "--app-id",
        required=True,
        help="The App ID of the Microsoft Entra app registration for Microsoft Graph API requests.",
    )
    parser.add_argument(
        "--app-secret",
        required=True,
        help="The client secret from the Microsoft Entra app registration.",
    )
    parser.add_argument(
        "--proxy",
        required=False,
        help=(
            "The HTTP proxy used to connect to the Microsoft Graph API. If not set, the "
            "environment settings will be used."
        ),
    )
    parser.add_argument(
        "--services-to-monitor",
        required=False,
        help=(
            "Comma-separated list of Microsoft Entra services you want to monitor. "
            "Possible values: entra_sync, entra_app_registration_creds, entra_saml_certs"
        ),
    )
    parser.add_argument(
        "--timeout",
        required=False,
        type=float,
        default=10.0,
        help=(
            "Define a custom timeout in seconds to use for each API request. The "
            "timeout is used for token request and any service that should be "
            "monitored. The default timeout is 10s."
        ),
    )

    return parser.parse_args()


def handle_error(err: Exception, context: str, exit_code: int = 1) -> None:
    err_msg = f"{err}"
    if getattr(err, "response", None) and err.response.text:
        err_msg += f"Response: {err.response.text}"

    sys.stderr.write(f"{err_msg}\n\n{context}\n")

    sys.exit(exit_code)


def get_access_token(
    tenant_id: str,
    app_id: str,
    app_secret: str,
    resource_scope: str,
    timeout: float,
    proxy: Optional[HTTPProxyConfig],
) -> str:
    token_url = f"https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token"

    headers = {"Content-Type": "application/x-www-form-urlencoded"}

    body = {
        "client_id": app_id,
        "client_secret": app_secret,
        "grant_type": "client_credentials",
        "scope": resource_scope,
    }

    try:
        api_response = requests.post(
            token_url,
            headers=headers,
            data=body,
            timeout=timeout,
            proxies=proxy.to_requests_proxies(),
        )
        api_response.raise_for_status()
    except requests.exceptions.Timeout as err:
        handle_error(
            err,
            "Timeout while getting access token.",
            11,
        )
    except requests.exceptions.RequestException as err:
        handle_error(
            err, "Failed to get access token. Please check your connection configuration.", 1
        )

    api_response_json = api_response.json()
    access_token = api_response_json["access_token"]

    return access_token


class EntraSyncStatus(TypedDict):
    sync_enabled: Optional[bool]
    sync_last: Optional[str]


def get_entra_sync(
    token: str, tenant_id: str, timeout: float, proxy: Optional[HTTPProxyConfig]
) -> EntraSyncStatus:
    entra_sync_url = (
        f"https://graph.microsoft.com/v1.0/organization/{tenant_id}"
        "?$select=onPremisesLastSyncDateTime,onPremisesSyncEnabled"
    )

    headers = {"Authorization": "Bearer " + token}

    try:
        entra_sync_response = requests.get(
            entra_sync_url, headers=headers, timeout=timeout, proxies=proxy.to_requests_proxies()
        )
        entra_sync_response.raise_for_status()
    except requests.exceptions.Timeout as err:
        handle_error(
            err,
            "Timeout while getting Entra connect/cloud sync.",
            12,
        )
    except requests.exceptions.RequestException as err:
        handle_error(
            err,
            "Failed to get Entra connect sync information. Please check your application "
            "permissions.",
            2,
        )

    entra_sync_dict = entra_sync_response.json()

    entra_sync = {
        "sync_enabled": entra_sync_dict["onPremisesSyncEnabled"],
        "sync_last": entra_sync_dict["onPremisesLastSyncDateTime"],
    }

    return entra_sync


class AppCred(TypedDict):
    cred_id: str
    cred_name: Optional[str]
    cred_identifier: Optional[str]
    cred_expiration: str


class AppRegistration(TypedDict):
    app_name: str
    app_appid: str
    app_id: str
    app_notes: Optional[str]
    cred_type: str
    app_creds: List[AppCred]


def get_entra_app_registration_creds(
    token: str, timeout: float, proxy: Optional[HTTPProxyConfig]
) -> List[AppRegistration]:
    entra_app_registrations_url = (
        "https://graph.microsoft.com/v1.0/applications"
        "?$select=appId,id,notes,displayName,keyCredentials,passwordCredentials"
    )

    headers = {"Authorization": "Bearer " + token}

    entra_app_registrations = []

    while entra_app_registrations_url is not None:
        try:
            entra_app_registration_response = requests.get(
                entra_app_registrations_url,
                headers=headers,
                timeout=timeout,
                proxies=proxy.to_requests_proxies(),
            )
            entra_app_registration_response.raise_for_status()
        except requests.exceptions.Timeout as err:
            handle_error(
                err,
                "Timeout while getting Entra app registrations.",
                13,
            )
        except requests.exceptions.RequestException as err:
            handle_error(
                err,
                "Failed to get Entra app registrations. Please check your application permissions.",
                3,
            )
        entra_app_registration_dict = entra_app_registration_response.json()
        entra_app_registrations.extend(entra_app_registration_dict.get("value", []))

        # get next page if available (pagination)
        entra_app_registrations_url = entra_app_registration_dict.get("@odata.nextLink")

    app_names = set()
    app_list = []
    for app in entra_app_registrations:
        app_name = app["displayName"]
        app_appid = app["appId"]
        app_id = app["id"]
        app_notes = app["notes"]
        app_secrets = app.get("passwordCredentials", [])
        app_certs = app.get("keyCredentials", [])

        # generate unique names, because entra app name is not unique
        if app_name in app_names and (app_secrets or app_certs):
            app_name_unique = f"{app_name}_{app_id[-4:]}"
        else:
            app_name_unique = app_name
            app_names.add(app_name)

        for cred_type, creds in [("secret", app_secrets), ("certificate", app_certs)]:
            if creds:
                app_creds_list = [
                    {
                        "cred_id": cred["keyId"],
                        "cred_name": cred["displayName"],
                        "cred_identifier": cred["customKeyIdentifier"],
                        "cred_expiration": cred["endDateTime"],
                    }
                    for cred in creds
                ]

                app_list.append(
                    {
                        "app_name": app_name_unique,
                        "app_appid": app_appid,
                        "app_id": app_id,
                        "app_notes": app_notes,
                        "cred_type": cred_type,
                        "app_creds": app_creds_list,
                    }
                )

    return app_list


class SamlInfo(TypedDict):
    app_appid: str
    app_id: str
    app_name: str
    app_notes: Optional[str]
    cert_expiration: str
    cert_thumbprint: str


def get_entra_saml_certs(
    token: str, timeout: float, proxy: Optional[HTTPProxyConfig]
) -> List[SamlInfo]:
    # preferredTokenSigningKeyEndDateTime and preferredTokenSigningKeyThumbprint are not
    # available in v1.0 (2024-12-06)
    entra_saml_certs_url = (
        "https://graph.microsoft.com/beta/servicePrincipals"
        "?$filter=preferredSingleSignOnMode eq 'saml' and accountEnabled eq true"
        "&$select=appId,id,displayName,notes,preferredTokenSigningKeyEndDateTime,"
        "preferredTokenSigningKeyThumbprint"
    )

    headers = {"Authorization": "Bearer " + token}

    entra_saml_certs = []

    while entra_saml_certs_url is not None:
        try:
            entra_saml_certs_response = requests.get(
                entra_saml_certs_url,
                headers=headers,
                timeout=timeout,
                proxies=proxy.to_requests_proxies(),
            )
            entra_saml_certs_response.raise_for_status()
        except requests.exceptions.Timeout as err:
            handle_error(
                err,
                "Timeout while getting Entra service principals with SAML configured "
                f"({int(timeout)}s).",
                14,
            )
        except requests.exceptions.RequestException as err:
            handle_error(
                err,
                "Failed to get Entra service principals with SAML configured. Please check your "
                "application permissions.",
                4,
            )

        entra_saml_certs_dict = entra_saml_certs_response.json()
        entra_saml_certs.extend(entra_saml_certs_dict.get("value", []))

        # get next page if available (pagination)
        entra_saml_certs_url = entra_saml_certs_dict.get("@odata.nextLink")

    app_list = []
    for app in entra_saml_certs:
        app_dict = {
            "app_appid": app["appId"],
            "app_id": app["id"],
            "app_name": app["displayName"],
            "app_notes": app["notes"],
            "cert_expiration": app["preferredTokenSigningKeyEndDateTime"],
            "cert_thumbprint": app["preferredTokenSigningKeyThumbprint"],
        }

        app_list.append(app_dict)

    app_list.sort(key=lambda x: x["app_id"])

    return app_list


def main():
    args = parse_arguments()
    tenant_id = args.tenant_id
    app_id = args.app_id
    proxy = deserialize_http_proxy_config(args.proxy)
    services_to_monitor = args.services_to_monitor.split(",") if args.services_to_monitor else None
    timeout = args.timeout

    pw_id, pw_path = args.app_secret.split(":")
    app_secret = cmk.utils.password_store.lookup(Path(pw_path), pw_id)

    resource_scope = "https://graph.microsoft.com/.default"

    token = get_access_token(tenant_id, app_id, app_secret, resource_scope, timeout, proxy)

    if "entra_sync" in services_to_monitor:
        entra_sync = get_entra_sync(token, tenant_id, timeout, proxy)
        if entra_sync:
            print("<<<ms_entra_sync:sep(0)>>>")
            print(json.dumps(entra_sync))

    if "entra_app_registration_creds" in services_to_monitor:
        entra_app_registration_creds = get_entra_app_registration_creds(token, timeout, proxy)
        if entra_app_registration_creds:
            print("<<<ms_entra_app_creds:sep(0)>>>")
            print(json.dumps(entra_app_registration_creds))

    if "entra_saml_certs" in services_to_monitor:
        entra_saml_certs = get_entra_saml_certs(token, timeout, proxy)
        if entra_saml_certs:
            print("<<<ms_entra_saml_certs:sep(0)>>>")
            print(json.dumps(entra_saml_certs))


if __name__ == "__main__":
    main()
