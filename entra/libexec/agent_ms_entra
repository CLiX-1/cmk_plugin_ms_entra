#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4; max-line-length: 100 -*-

# Copyright (C) 2024, 2025  Christopher Pommer <cp.software@outlook.de>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


####################################################################################################
# This Checkmk plugin (Special Agent) retrieves information from Microsoft Entra using the Microsoft
# Graph API. The plugin can be used to monitor the status of the credentials from Entra app
# registrations, the certificate from the Entra Conditional Access VPN, Entra Connect Sync and
# the SAML certificate from Entra service principals.


import sys
import argparse
import json
from pathlib import Path
from typing import List, Optional, TypedDict

import requests

import cmk.utils.password_store
from cmk.utils.http_proxy_config import deserialize_http_proxy_config, HTTPProxyConfig


def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--tenant-id", required=True, help="The unique ID from the Microsoft Entra tenant."
    )
    parser.add_argument(
        "--app-id",
        required=True,
        help="The App ID of the Microsoft Entra app registration for Microsoft Graph API requests.",
    )
    parser.add_argument(
        "--app-secret",
        required=True,
        help="The client secret from the Microsoft Entra app registration.",
    )
    parser.add_argument(
        "--proxy",
        required=False,
        help=(
            "The HTTP proxy used to connect to the Microsoft Graph API. If not set, the "
            "environment settings will be used."
        ),
    )
    parser.add_argument(
        "--services-to-monitor",
        required=False,
        help=(
            "Comma-separated list of Microsoft Entra services you want to monitor. "
            "Possible values: entra_app_registration_creds, entra_ca_vpn_cert, entra_sync, "
            "entra_saml_certs"
        ),
    )
    parser.add_argument(
        "--timeout",
        required=False,
        type=float,
        default=10.0,
        help=(
            "Define a custom timeout in seconds to use for each API request. The "
            "timeout is used for token request and any service that should be "
            "monitored. The default timeout is 10s."
        ),
    )

    return parser.parse_args()


def handle_error(err: Exception, context: str, exit_code: int = 1) -> None:
    err_msg = f"{err}"
    if hasattr(err, "response") and err.response:
        err_msg += f" Response: {getattr(err.response, 'text', 'No response text')}"

    sys.stderr.write(f"{err_msg}\n\n{context}\n")

    sys.exit(exit_code)


def get_access_token(
    tenant_id: str,
    app_id: str,
    app_secret: str,
    resource_scope: str,
    timeout: float,
    proxy: HTTPProxyConfig,
) -> str:
    token_url = f"https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token"

    headers = {"Content-Type": "application/x-www-form-urlencoded"}

    body = {
        "client_id": app_id,
        "client_secret": app_secret,
        "grant_type": "client_credentials",
        "scope": resource_scope,
    }

    try:
        token_response = requests.post(
            token_url,
            headers=headers,
            data=body,
            timeout=timeout,
            proxies=proxy.to_requests_proxies(),
        )
        token_response.raise_for_status()
    except requests.exceptions.Timeout as err:
        handle_error(
            err,
            "Timeout while getting access token.",
            11,
        )
    except requests.exceptions.RequestException as err:
        error_message = "Failed to get access token."
        error_message_details = {
            400: f"{error_message} Please check tenant ID and client ID.",
            401: f"{error_message} Please check client secret.",
            429: f"{error_message} Request has been throttled.",
        }
        status_code = getattr(err.response, "status_code", 0)
        handle_error(
            err,
            error_message_details.get(status_code, error_message),
            1,
        )

    token_response_dict = token_response.json()
    access_token = token_response_dict["access_token"]

    return access_token


class AppCred(TypedDict):
    cred_id: str
    cred_name: Optional[str]
    cred_identifier: Optional[str]
    cred_expiration: str


class AppRegistration(TypedDict):
    app_name: str
    app_appid: str
    app_id: str
    app_notes: Optional[str]
    cred_type: str
    app_creds: List[AppCred]


def get_entra_app_registration_creds(
    token: str, timeout: float, proxy: HTTPProxyConfig
) -> List[AppRegistration]:
    entra_app_registrations_url = (
        "https://graph.microsoft.com/v1.0/applications"
        "?$select=appId,id,notes,displayName,keyCredentials,passwordCredentials"
    )

    headers = {"Authorization": f"Bearer {token}"}

    entra_app_registrations = []

    while entra_app_registrations_url:
        try:
            entra_app_registration_response = requests.get(
                entra_app_registrations_url,
                headers=headers,
                timeout=timeout,
                proxies=proxy.to_requests_proxies(),
            )
            entra_app_registration_response.raise_for_status()
        except requests.exceptions.Timeout as err:
            handle_error(
                err,
                "Timeout while getting Entra app registrations.",
                12,
            )
        except requests.exceptions.RequestException as err:
            error_message = "Failed to get Entra app registrations."
            error_message_details = {
                403: (
                    f"{error_message} Please check application API permissions. At least "
                    "Application.Read.All is required."
                ),
                429: f"{error_message} Request has been throttled.",
            }
            status_code = getattr(err.response, "status_code", 0)
            handle_error(
                err,
                error_message_details.get(status_code, error_message),
                2,
            )

        entra_app_registration_dict = entra_app_registration_response.json()
        entra_app_registrations.extend(entra_app_registration_dict.get("value", []))

        # get next page if available (pagination)
        entra_app_registrations_url = entra_app_registration_dict.get("@odata.nextLink")

    app_names = set()
    app_list: List[AppRegistration] = []
    for app in entra_app_registrations:
        app_name = app["displayName"]
        app_appid = app["appId"]
        app_id = app["id"]
        app_notes = app["notes"]
        app_secrets = app.get("passwordCredentials", [])
        app_certs = app.get("keyCredentials", [])

        # generate unique names, because entra app name is not unique
        if app_name in app_names and (app_secrets or app_certs):
            app_name_unique = f"{app_name}_{app_id[-4:]}"
        else:
            app_name_unique = app_name
            app_names.add(app_name)

        for cred_type, creds in [("secret", app_secrets), ("certificate", app_certs)]:
            if creds:
                app_creds_list: List[AppCred] = [
                    {
                        "cred_id": cred["keyId"],
                        "cred_name": cred["displayName"],
                        "cred_identifier": cred["customKeyIdentifier"],
                        "cred_expiration": cred["endDateTime"],
                    }
                    for cred in creds
                ]

                app_list.append(
                    {
                        "app_name": app_name_unique,
                        "app_appid": app_appid,
                        "app_id": app_id,
                        "app_notes": app_notes,
                        "cred_type": cred_type,
                        "app_creds": app_creds_list,
                    }
                )

    return app_list


class VpnAppCert(TypedDict):
    cert_id: str
    cert_name: str
    cert_identifier: str
    cert_expiration: str


class VpnApp(TypedDict):
    app_name: str
    app_appid: str
    app_id: str
    app_certs: List[VpnAppCert]


def get_entra_ca_vpn_cert(token: str, timeout: float, proxy: HTTPProxyConfig) -> List[VpnApp]:
    entra_ca_vpn_cert_url = (
        "https://graph.microsoft.com/v1.0/servicePrincipals"
        "?$filter=displayName eq 'VPN Server' and accountEnabled eq true"
        "&$select=appId,id,keyCredentials"
    )

    headers = {"Authorization": f"Bearer {token}"}

    entra_ca_vpn_cert = []

    try:
        entra_ca_vpn_cert_response = requests.get(
            entra_ca_vpn_cert_url,
            headers=headers,
            timeout=timeout,
            proxies=proxy.to_requests_proxies(),
        )
        entra_ca_vpn_cert_response.raise_for_status()
    except requests.exceptions.Timeout as err:
        handle_error(
            err,
            "Timeout while getting Entra VPN Server service principal.",
            13,
        )
    except requests.exceptions.RequestException as err:
        error_message = "Failed to get Entra Entra Conditional Access VPN certificate."
        error_message_details = {
            403: (
                f"{error_message} Please check application API permissions. At least "
                "Application.Read.All is required."
            ),
            429: f"{error_message} Request has been throttled.",
        }
        status_code = getattr(err.response, "status_code", 0)
        handle_error(
            err,
            error_message_details.get(status_code, error_message),
            3,
        )

    entra_ca_vpn_cert_dict = entra_ca_vpn_cert_response.json()
    entra_ca_vpn_cert = entra_ca_vpn_cert_dict.get("value", [])

    app_list: List[VpnApp] = []
    for app in entra_ca_vpn_cert:
        app_cert_list: List[VpnAppCert] = []
        for cert in app["keyCredentials"]:
            if cert["key"]:
                app_cert: VpnAppCert = {
                    "cert_id": cert["keyId"],
                    "cert_name": cert["displayName"],
                    "cert_identifier": cert["customKeyIdentifier"],
                    "cert_expiration": cert["endDateTime"],
                }
                app_cert_list.append(app_cert)

        app_dict: VpnApp = {
            "app_appid": app["appId"],
            "app_id": app["id"],
            "app_name": "VPN Server",
            "app_certs": app_cert_list,
        }

        app_list.append(app_dict)

    if len(app_list) == 1 and not app_list[0]["app_certs"]:
        return []

    return app_list


class EntraSyncStatus(TypedDict):
    sync_enabled: Optional[bool]
    sync_last: Optional[str]


def get_entra_sync(
    token: str, tenant_id: str, timeout: float, proxy: HTTPProxyConfig
) -> EntraSyncStatus:
    entra_sync_url = (
        f"https://graph.microsoft.com/v1.0/organization/{tenant_id}"
        "?$select=onPremisesLastSyncDateTime,onPremisesSyncEnabled"
    )

    headers = {"Authorization": f"Bearer {token}"}

    try:
        entra_sync_response = requests.get(
            entra_sync_url, headers=headers, timeout=timeout, proxies=proxy.to_requests_proxies()
        )
        entra_sync_response.raise_for_status()
    except requests.exceptions.Timeout as err:
        handle_error(
            err,
            "Timeout while getting Entra Connect/Cloud Sync.",
            14,
        )
    except requests.exceptions.RequestException as err:
        print(err)
        error_message = "Failed to get Entra Connect/Cloud Sync."
        error_message_details = {
            403: (
                f"{error_message} Please check application API permissions. At least "
                "Organization.Read.All is required."
            ),
            429: f"{error_message} Request has been throttled.",
        }
        status_code = getattr(err.response, "status_code", 0)
        handle_error(
            err,
            error_message_details.get(status_code, error_message),
            4,
        )

    entra_sync_dict = entra_sync_response.json()

    entra_sync: EntraSyncStatus = {
        "sync_enabled": entra_sync_dict["onPremisesSyncEnabled"],
        "sync_last": entra_sync_dict["onPremisesLastSyncDateTime"],
    }

    return entra_sync


class SamlInfo(TypedDict):
    app_appid: str
    app_id: str
    app_name: str
    app_notes: Optional[str]
    cert_expiration: Optional[str]
    cert_thumbprint: Optional[str]


def get_entra_saml_certs(token: str, timeout: float, proxy: HTTPProxyConfig) -> List[SamlInfo]:
    # preferredTokenSigningKeyEndDateTime is not available in v1.0 (2025-02-09)
    entra_saml_certs_url = (
        "https://graph.microsoft.com/beta/servicePrincipals"
        "?$filter=preferredSingleSignOnMode eq 'saml' and accountEnabled eq true"
        "&$select=appId,id,displayName,notes,preferredTokenSigningKeyEndDateTime,"
        "preferredTokenSigningKeyThumbprint"
    )

    headers = {"Authorization": f"Bearer {token}"}

    entra_saml_certs = []

    while entra_saml_certs_url:
        try:
            entra_saml_certs_response = requests.get(
                entra_saml_certs_url,
                headers=headers,
                timeout=timeout,
                proxies=proxy.to_requests_proxies(),
            )
            entra_saml_certs_response.raise_for_status()
        except requests.exceptions.Timeout as err:
            handle_error(
                err,
                "Timeout while getting Entra service principals with SAML configured.",
                15,
            )
        except requests.exceptions.RequestException as err:
            error_message = "Failed to get Entra service principals with SAML configured."
            error_message_details = {
                403: (
                    f"{error_message} Please check application API permissions. At least "
                    "Application.Read.All is required."
                ),
                429: f"{error_message} Request has been throttled.",
            }
            status_code = getattr(err.response, "status_code", 0)
            handle_error(
                err,
                error_message_details.get(status_code, error_message),
                4,
            )

        entra_saml_certs_dict = entra_saml_certs_response.json()
        entra_saml_certs.extend(entra_saml_certs_dict.get("value", []))

        # get next page if available (pagination)
        entra_saml_certs_url = entra_saml_certs_dict.get("@odata.nextLink")

    saml_info_list: List[SamlInfo] = sorted(
        [
            SamlInfo(
                app_appid=app["appId"],
                app_id=app["id"],
                app_name=app["displayName"],
                app_notes=app["notes"],
                cert_expiration=app["preferredTokenSigningKeyEndDateTime"],
                cert_thumbprint=app["preferredTokenSigningKeyThumbprint"],
            )
            for app in entra_saml_certs
        ],
        key=lambda x: x["app_id"],
    )

    return saml_info_list


def main():
    args = parse_arguments()
    tenant_id = args.tenant_id
    app_id = args.app_id
    proxy = deserialize_http_proxy_config(args.proxy)
    services_to_monitor = args.services_to_monitor.split(",") if args.services_to_monitor else None
    timeout = args.timeout

    pw_id, pw_path = args.app_secret.split(":")
    app_secret = cmk.utils.password_store.lookup(Path(pw_path), pw_id)

    resource_scope = "https://graph.microsoft.com/.default"

    token = get_access_token(tenant_id, app_id, app_secret, resource_scope, timeout, proxy)

    if "entra_app_registration_creds" in services_to_monitor:
        entra_app_registration_creds = get_entra_app_registration_creds(token, timeout, proxy)
        print("<<<ms_entra_app_creds:sep(0)>>>")
        print(json.dumps(entra_app_registration_creds))

    if "entra_ca_vpn_cert" in services_to_monitor:
        entra_ca_vpn_cert = get_entra_ca_vpn_cert(token, timeout, proxy)
        print("<<<ms_entra_ca_vpn_cert:sep(0)>>>")
        print(json.dumps(entra_ca_vpn_cert))

    if "entra_sync" in services_to_monitor:
        entra_sync = get_entra_sync(token, tenant_id, timeout, proxy)
        print("<<<ms_entra_sync:sep(0)>>>")
        print(json.dumps(entra_sync))

    if "entra_saml_certs" in services_to_monitor:
        entra_saml_certs = get_entra_saml_certs(token, timeout, proxy)
        print("<<<ms_entra_saml_certs:sep(0)>>>")
        print(json.dumps(entra_saml_certs))


if __name__ == "__main__":
    main()
